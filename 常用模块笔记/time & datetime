一：time 模块常用方法小记
1、time.sleep(secs)


2、time.time() 返回当前时间的时间戳
    In [161]: time.time()
    Out[161]: 1408008711.730218


3.time.localtime([secs])
将一个时间戳转换成一个当前时区的struct_time，如果seconds参数未输入，
则以当前时间为转换标准 未提供secs参数时，按当前时间为准
    In [141]: time.localtime()
    Out[141]: time.struct_time(tm_year=2014, tm_mon=8, tm_mday=14, tm_hour=17,
                    tm_min=23, tm_sec=48, tm_wday=3, tm_yday=226, tm_isdst=0)
    提供secs为当前时间戳时
    In [143]: time.localtime(time.time())
    Out[143]: time.struct_time(tm_year=2014, tm_mon=8, tm_mday=14, tm_hour=17,
                tm_min=24, tm_sec=2, tm_wday=3, tm_yday=226, tm_isdst=0)


4.time.strftime(format[, t])将指定的struct_time(默认为当前时间)
根据指定的格式化字符串输出 ,t未指定，传入time.localtime()作为默认参数：
注意：t是一个struct_time对象

    In [156]: time.strftime('%Y-%m-%d %H:%M:%S')
    Out[156]: '2014-08-14 17:28:16’

    指定t为time.localtime(1407945600.0)时：
    In [157]: time.localtime(1407945600.0)
    Out[157]: time.struct_time(tm_year=2014, tm_mon=8, tm_mday=14, tm_hour=0, tm_min=0,
                    tm_sec=0, tm_wday=3, tm_yday=226, tm_isdst=0)

    In [158]: time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(1407945600.0))
    Out[158]: '2014-08-14 00:00:00’


6、time.mktime(t)  将一个struct_time转换为时间戳,
time.localtime接收一个时间戳返回一个struct_time，
而time.mktime接收一个struct_time，返回一个时间戳
    In [159]: time.localtime(1407945600.0)
    Out[159]: time.struct_time(tm_year=2014, tm_mon=8, tm_mday=14, tm_hour=0,
                    tm_min=0, tm_sec=0, tm_wday=3, tm_yday=226, tm_isdst=0)
    In [160]: time.mktime(time.localtime(1407945600.0))
    Out[160]: 1407945600.0

-------------------------------------------------------------------------------
二、datetime 模块常用方法小记

datetime模块常用的主要有下面这四个类：

a. datetime.date: 是指年月日构成的日期  (相当于日历)
b. datetime.time: 是指时分秒微秒构成的一天24小时中的具体时间  (相当于手表)
c. datetime.datetime: 上面两个合在一起，既包含时间又包含日期
d. datetime.timedelta: 时间间隔对象(timedelta)。
一个时间点(datetime)加上一个时间间隔(timedelta)可以得到一个新的时间点(datetime)。
比如今天的上午3点加上5个小时得到今天的上午8点。同理，两个时间点相减会得到一个时间间隔。

1.datetime.date 类 （年月日对象 相当于日历）

    1.新建一个date对象，日期为今天，既可以直接调用
    datetime.date.today()， 也可以直接向datetime.date()传值，如下：
        In [4]: today = datetime.date.today()
        In [5]: today
        Out[5]: datetime.date(2014, 8, 15)
        In [6]: t = datetime.date(2014,8,15)
        In [7]: t
        Out[7]: datetime.date(2014, 8, 15)

    2、datetime.date.strftime(format)
    格式化为需要的时间，如常用的 “年-月-日 小时：分钟：秒” 格式
        In [8]: today.strftime('%Y-%m-%d %H:%M:%S')
        Out[8]: '2014-08-15 00:00:00’  --date对象中小时、分钟、秒默认都是0


    3.datetime.date.timple() 转成struct_time格式，这样传递给time.mktime(t)  后，
    直接转成时间戳格式。 -- date类转成时间戳
        In [9]: today.timetuple()
        Out[9]: time.struct_time(tm_year=2014, tm_mon=8, tm_mday=15, tm_hour=0,
                        tm_min=0, tm_sec=0, tm_wday=4, tm_yday=227, tm_isdst=-1)
        In [10]: time.mktime(today.timetuple())
        Out[10]: 1408032000.0

    4.datetime.date.replace(year, month, day)  返回一个替换后的date对象
        In [11]: today.replace(year=2013)
        Out[11]: datetime.date(2013, 8, 15)

    5.datetime.date.fromtimestamp(timestamp) 将时间戳转化为date对象
        In [12]: datetime.date.fromtimestamp(1408058729)
        Out[12]: datetime.date(2014, 8, 15)

------

2.datetime.time 类

    1.新建一个time对象 （时，分，秒）
        In [15]: t =datetime.time(8, 45, 20)
        Out[15]: datetime.time(8, 45, 20)

    2.datetime.time.(format)格式化输出
        In [16]: t.strftime('%Y-%m-%d %H:%M:%S')
        Out[16]: '1900-01-01 08:45:20’
        time对应的年、月、日为1900、01、01，纪元年的那个时间

    3.datetime.time.replace([hour[, minute[, second[, microsecond[, tzinfo]]]]])  返回一个替换后的time对象
        In [17]: t.replace(hour=9)
        Out[17]: datetime.time(9, 45, 20)
--------
3.datetime.datetime类  (日历+手表 ，年月日 时分秒 毫秒)
           其实和date的那些方法差不多了
    1.新建一个datetime对象，日期为今天，既可以直接调用datetime.datetime.today()，
                           也可以直接向datetime.datetime()传值，如下：
        In [21]: d1 = datetime.datetime.today()
        In [22]: d1
        Out[22]: datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)
        In [23]: d2 = datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)
        In [24]: d2
        Out[24]: datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)

    2.datetime.datetime.now([tz])
            当不指定时区时，和datetime.datetime.today()是一样的结果，如下
        In [25]: datetime.datetime.now()
        Out[25]: datetime.datetime(2014, 8, 15, 8, 14, 50, 738672)

    3..datetime.datetime.strftime(format) 格式化为需要的时间，如常用的 “年-月-日 小时：分钟：秒” 格式
        In [27]: d1
        Out[27]: datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)
        In [28]: d1.strftime('%Y-%m-%d %H:%M:%S')
        Out[28]: '2014-08-15 08:12:34’

    4.datetime.datetime.timple() 转成struct_time格式，
            这样传递给time.mktime(t)  后，直接转成时间戳格式
        In [29]: d1
        Out[29]: datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)
        In [30]: d1.timetuple()
        Out[30]: time.struct_time(tm_year=2014, tm_mon=8, tm_mday=15, tm_hour=8,
                        tm_min=12,tm_sec=34, tm_wday=4, tm_yday=227, tm_isdst=-1)
        In [31]: time.mktime(d1.timetuple())
        Out[31]: 1408061554.0

    5.datetime.datetime.replace(year, month, day)  返回一个替换后的date对象
        In [32]: d1
        Out[32]: datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)
        In [33]: d1.replace(year=2000)
        Out[33]: datetime.datetime(2000, 8, 15, 8, 12, 34, 790945)

    6.datetime.datetime.fromtimestamp(timestamp) 将时间戳转化为datetime对象
        In [34]: time.time()
        Out[34]: 1408061894.081552
        In [35]: datetime.datetime.fromtimestamp(1408061894)
        Out[35]: datetime.datetime(2014, 8, 15, 8, 18, 14)

--------------------
4.datetime.timedelta类   主要做时间的加减法用，如下：
    In [78]: today = datetime.datetime.today()
    In [79]: yesterday = today - datetime.timedelta(days=1)
    In [80]: yesterday
    Out[80]: datetime.datetime(2014, 8, 14, 15, 8, 25, 783471)
    In [81]: today
    Out[81]: datetime.datetime(2014, 8, 15, 15, 8, 25, 783471)