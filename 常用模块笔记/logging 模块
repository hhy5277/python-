--------------------------------------------------------------------------------
基本用法：
level默认等级为 logging.warning



import logging

#在不做配置在控制台输出
# logging.warning("user [alex] attempted wrong password more than 3 times")
# logging.critical("server is down")

logging.basicConfig(filename='log_test.log',
                    level=logging.DEBUG,
                    format='%(asctime)s:%(levelname)s:%(filename)s:%(funcName)s:%(lineno)d:%(process)d %(message)s',
                    datefmt='%Y-%m-%d %I:%M:%S %p')

def sayhi():
    logging.error("from sayhi....")

sayhi()


-------------------------------------------------------------------------
实际用法：


import logging
from logging import handlers  #（RotatingFileHandler，TimedRotatingFileHandler）


class IgnoreBackupLogFilter(logging.Filter):
    """忽略带db backup 的日志"""
    def filter(self, record): #固定写法
        return  "db backup" in record.getMessage()


#1.生成 logger 对象
logger =logging.getLogger("web")
logger.setLevel(logging.DEBUG)

#1.1 把filter对象添加到logger中
logger.addFilter(IgnoreBackupLogFilter())

#2. 生成 handler对象
#  logging.StreamHandler() 日志信息会输出到指定的stream中，如果stream为空则默认输出到控制台窗口。
ch = logging.StreamHandler()
#ch.setLevel(logging.INFO)

#参数文件的路径名称，和编码方式
#fh = logging.FileHandler("web.log",encoding="utf-8")
#fh = handlers.RotatingFileHandler( "web.log",maxBytes=10,backupCount=3)
fh = handlers.TimedRotatingFileHandler( "web.log",when="S",interval=5,backupCount=3)
#fh.setLevel(logging.WARNING)

#2.1 把 handler对象 绑定到logger
logger.addHandler(ch)
logger.addHandler(fh)

#3.生成formatter 对象
#3.1 把formatter 对象 绑定handler对象
file_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(lineno)d - %(message)s')

ch.setFormatter(console_formatter)
fh.setFormatter(file_formatter)



logger.warning("test log ")
logger.info("test log 2")
logger.debug("test log 3")
logger.debug("test log db backup 3")

#console : INFO
#global : DEBUG  default level : warning
#file :Warning

#全局设置为DEBUG后， console handler 设置为INFO, 如果输出的日志级别是debug, 那就不会在屏幕上打印


-----------------------------------------------
-----------------------------------------------
logging.getLogger([name])：
返回一个logger对象，如果没有指定名字将返回root logger。

self.mylogger.setLevel(level)：
指定最低的日志级别，可用的日志级别有logging.DEBUG<logging.INFO<logging.WARNING<logging.ERRO<logging.CRITICAL。

只有日志等级大于或等于设置的日志级别的日志才会被输出。

logging.FileHandle(path):
创建一个handler,用于写入日志文件.也可以创建一个StreamHandle控制台输出。还有很多Handle就大家自行进行扩展了。

logging.Formatter(*args)：
定义handler的输出格式formatter。输出格式有很多。

format参数中可能用到的格式化串：
    %(name)s Logger的名字
    %(levelno)s 数字形式的日志级别
    %(levelname)s 文本形式的日志级别
    %(filename)s 调用日志输出函数的模块的文件名
    %(module)s 调用日志输出函数的模块名
    %(funcName)s 调用日志输出函数的函数名
    %(lineno)d 调用日志输出函数的语句所在的代码行
    %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示
    %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数
    %(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒
    %(message)s用户输出的消息

self.fn.setFormatter(self.formatter):
将输出格式绑定到handle上。

self.mylogger.addHandler(self.fn)：
将handle绑定到mylogger对象上。


