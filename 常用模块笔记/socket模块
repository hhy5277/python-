Python 提供了两个基本的 socket 模块。

   第一个是 Socket，它提供了标准的 BSD Sockets API。

   第二个是 SocketServer， 它提供了服务器中心类，可以简化网络服务器的开发
------------------------------------------------
1、Socket 类型 套接字格式： socket(family,type[,protocal])

            socket类型                                描述

            socket.AF_UNIX              只能够用于单一的Unix系统进程间通信

            ！socket.AF_INET              服务器之间网络通信

            socket.AF_INET6             IPv6

            ！socket.SOCK_STREAM          流式socket , for TCP

            ！socket.SOCK_DGRAM           数据报式socket , for UDP

            socket.SOCK_RAW         原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，
                                    而SOCK_RAW可以；其次，SOCK_RAW也可以处理特殊的IPv4报文；
                                此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头。

            socket.SOCK_SEQPACKET        可靠的连续数据包服务

            ！创建TCP Socket：              s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)

            ！创建UDP Socket：              s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)

-------------
2、Socket 函数 （都是二进制数据传递的）
    1）TCP发送数据时，已建立好TCP连接，所以不需要指定地址。
                UDP是面向无连接的，每次发送要指定是发给谁。
    2）服务端与客户端不能直接发送列表，元组，字典。需要字符串化repr(data)。（二进制流数据）



    s.bind(address)   将套接字绑定到地址, 在AF_INET下,以元组（host,port）的形式表示地址.
    s.listen(backlog)       （挂起最大个数）开始监听TCP传入连接。backlog指定在拒绝连接之前，
                            操作系统可以挂起的最大连接数量。该值至少为1，大部分应用程序设为5就可以了。

    s.accept()         服务端接受TCP连接并返回（conn,address）元祖,其中conn是新的套接字对象，
                        可以用来接收和发送数据。address是连接客户端的地址。

    s.connect(address)          （客户端）连接到address处的套接字。
                                一般address的格式为元组（hostname,port），
                                如果连接出错，返回socket.error错误。

    s.recv(bufsize[,flag])      接受TCP套接字的数据。数据以二进制字符串形式返回，
                                bufsize指定要接收的最大数字节数（1024）。
                                flag提供有关消息的其他信息，通常可以忽略。


    s.send(string[,flag])       发送TCP数据。将string中的bites数据发送到连接的套接字。
                                返回值是要发送的字节数量，该数量可能小于string的字节大小。

    s.sendall(string[,flag])    完整发送TCP数据。将string中的数据发送到连接的套接字，
                                但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。


    s.close()关闭套接字。

